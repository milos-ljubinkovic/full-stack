---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda

Parameters:
  DOMAIN:
    Type: String
  HOSTEDZONE:
    Type: String
  
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      # Policies:
      #   - PolicyName: allowS3
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #       - Effect: Allow
      #         Action:
      #         - s3:*
      #         Resource: "*"
      Path: "/"

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./api/
      Handler: src/lambda.handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      Environment:
        Variables:
          DOMAIN: !Ref DOMAIN
      Events:
        Trigger:
          Type: Schedule
          Enabled: false
          Properties:
            Enabled: !If [ IsProductionEnvironment, true, false ]
            Schedule: cron(0/5 * ? * * *)
            Input: '{ "path": "/trigger", "httpMethod": "POST", "headers": { "token": "token" } }'

  ApiFunctionURL:
    Type: AWS::Lambda::Url
    Properties: 
      AuthType: NONE
      TargetFunctionArn: !Ref ApiFunction

  ApiUrlFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiFunctionURL
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

  BlogFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./blog
      Handler: dist/lambda.handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      Environment:
        Variables:
          DOMAIN: !Ref DOMAIN

  BlogFunctionURL:
    Type: AWS::Lambda::Url
    Properties: 
      AuthType: NONE
      TargetFunctionArn: !Ref BlogFunction

  BlogFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BlogFunctionURL
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

  CloudFrontDistribution:
    DependsOn:
      - ApiFunctionURL
      - BlogFunctionURL
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Join ['', [ "api-", !Ref AWS::StackName, ".", !Ref DOMAIN]]
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          TargetOriginId: ApiFunction
          ViewerProtocolPolicy: "redirect-to-https"
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
          AllowedMethods: [ 'GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE' ]
        CacheBehaviors:
          - AllowedMethods: [ DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT ]
            TargetOriginId: BlogFunction
            PathPattern: /blogs
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: ApiFunction
            DomainName: !Select [2, !Split ["/", !GetAtt ApiFunctionURL.FunctionUrl]]
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
          - Id: BlogFunction
            DomainName: !Select [2, !Split ["/", !GetAtt BlogFunctionURL.FunctionUrl]]
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        PriceClass: "PriceClass_All"

  Domain:
    DependsOn:
      - CloudFrontDistribution
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref HOSTEDZONE
      RecordSets:
        - Name: !Join ['', [ "api-", !Ref AWS::StackName, ".", !Ref DOMAIN]]
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # global Cloudfront hosted zone
            DNSName: !GetAtt
              - CloudFrontDistribution
              - DomainName

  S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: !Join ['', [ "web-", !Ref AWS::StackName, "-", !Ref AWS::AccountId ]]
        WebsiteConfiguration:
          ErrorDocument: "index.html"
          IndexDocument: "index.html"

  ReadPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket


  SSLCertificate: 
    Type: "AWS::CertificateManager::Certificate"
    Properties: 
      DomainName: !Join ['', [ "*.", !Ref DOMAIN]]
      ValidationMethod: DNS

  FrontCloudFront:
    DependsOn:
      - S3Bucket
      - SSLCertificate
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Join ['', [ "web-", !Ref AWS::StackName, ".", !Ref DOMAIN]]
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403 # not found
            ResponseCode: 200
            ErrorCachingMinTTL: 10
            ResponsePagePath: "/index.html"
          - ErrorCode: 404 # not found
            ResponseCode: 200
            ErrorCachingMinTTL: 10
            ResponsePagePath: "/index.html"
        DefaultCacheBehavior:
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          TargetOriginId: s3origin
          ViewerProtocolPolicy: "redirect-to-https"
        # This DefaultRootObject configuration is not enough.
        # DefaultRootObject: "/index.html"
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName:  !Join ['', [ "web-", !Ref AWS::StackName, "-", !Ref AWS::AccountId, ".s3.", !Ref AWS::Region, ".amazonaws.com" ]]
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        PriceClass: "PriceClass_All"

  FrontDNS:
    DependsOn:
      - FrontCloudFront
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref HOSTEDZONE
      RecordSets:
        - Name: !Join ['', [ "web-", !Ref AWS::StackName, ".", !Ref DOMAIN]]
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt
              - FrontCloudFront
              - DomainName


  # CanaryRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         Effect: Allow
  #         Principal:
  #           Service: lambda.amazonaws.com
  #         Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: allowCanary
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #           - Effect: Allow
  #             Action:
  #             - s3:PutObject
  #             - s3:GetObject
  #             Resource:
  #             - arn:aws:s3:::cw-syn-results-841805187071-eu-west-1/*
  #           - Effect: Allow
  #             Action:
  #             - s3:GetBucketLocation
  #             Resource:
  #             - arn:aws:s3:::cw-syn-results-841805187071-eu-west-1
  #           - Effect: Allow
  #             Action:
  #             - logs:CreateLogStream
  #             - logs:PutLogEvents
  #             - logs:CreateLogGroup
  #             Resource:
  #             - "*"
  #           - Effect: Allow
  #             Action:
  #             - s3:ListAllMyBuckets
  #             - xray:PutTraceSegments
  #             Resource:
  #             - "*"
  #           - Effect: Allow
  #             Resource: "*"
  #             Action: cloudwatch:PutMetricData
  #             Condition:
  #               StringEquals:
  #                 cloudwatch:namespace: CloudWatchSynthetics

  # SyntheticsCanary:
  #     Type: 'AWS::Synthetics::Canary'
  #     Properties:
  #         Name: !Join ['', ['canary_', !Ref AWS::StackName]]
  #         ExecutionRoleArn: !Ref CanaryRole
  #         Code: {Handler: pageLoadBlueprint.handler, Script: "const synthetics = require('Synthetics');\n\nconst apiCanaryBlueprint = async function () {\n    const validateSuccessful = async function (res) {\n        return new Promise((resolve, reject) => {\n            if (res.statusCode < 200 || res.statusCode > 299) {\n                throw new Error(res.statusCode + ' ' + res.statusMessage);\n            }\n            res.on('end', () => {\n                resolve();\n            });\n        });\n    };\n\n    let request = {\n        hostname: 'api-'+process.env.BRANCH+'.domain.com',\n        method: 'GET',\n        path: '/health',\n        port: '443',\n        protocol: 'https:',\n        body: '',\n        headers: {\n            'User-Agent': synthetics.getCanaryUserAgentString()\n        }\n    };\n    let config = {\n        includeRequestHeaders: false,\n        includeResponseHeaders: false,\n        includeRequestBody: false,\n        includeResponseBody: false,\n        continueOnHttpStepFailure: true\n    };\n\n    await synthetics.executeHttpStep('Verify api', request, validateSuccessful, config);\n    request.path = '/live/healthcheck';\n    await synthetics.executeHttpStep('Verify live', request, validateSuccessful, config);\n};\n\nexports.handler = async () => {\n    return await apiCanaryBlueprint();\n};"}
  #         ArtifactS3Location: !Join ['', [ "s3://canary-", !Ref AWS::StackName, "-", !Ref AWS::AccountId ]]
  #         RuntimeVersion: syn-nodejs-puppeteer-3.9
  #         RunConfig: 

  #         Schedule: {Expression: 'rate(1 minute)', DurationInSeconds: 3600}
  #         RunConfig: {TimeoutInSeconds: 60}
  #         FailureRetentionPeriod: 30
  #         SuccessRetentionPeriod: 30
  #         StartCanaryAfterCreation: true

  # CanaryAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmDescription: Canary health check
  #     AlarmName: !Join ['', ['canaryalarm', !Ref AWS::StackName]]
  #     ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
  #     MetricName: SuccessPercent
  #     Namespace: CloudWatchSynthetics
  #     Statistic: Average
  #     Period: 120
  #     EvaluationPeriods: 1
  #     Threshold: 99
  #     Dimensions:
  #       - Name: CanaryName
  #         Value: !Join ['', ['canary_', !Ref AWS::StackName]]
  #     ComparisonOperator: LessThanThreshold


Outputs:
  API: 
    Value: !GetAtt  CloudFrontDistribution.DomainName
  FRONT:
    Value: !GetAtt  FrontCloudFront.DomainName